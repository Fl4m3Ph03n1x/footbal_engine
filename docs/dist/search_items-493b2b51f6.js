searchNodes=[{"ref":"FootbalEngine.html","title":"FootbalEngine","type":"module","doc":"Database engine. It can read the CSV file and index its contents for faster query searches. It can also query the indexed data. This module simulates an indexed (basic) memory db, where all the data is placed into memory and replicated for faster query searches. Memory usage will be inversionally proportional to query search times, meaning the more memory this solution uses, the faster the response times. It also uses :persistent_term tables, from OTP 21 becasue we are expected to perform a ton of reads, but only to write to the table once (at startup). More info on :persistent_term: http://erlang.org/doc/man/persistent_term.html"},{"ref":"FootbalEngine.html#new/1","title":"FootbalEngine.new/1","type":"function","doc":"Reads the given CSV file and indexes it into memory. If such is not possible, it keeps trying to read the file and populate it until the operation is completely successful. Example: path = &quot;./Data.csv&quot; {:ok, _pid} = FootbalEngine.new(path) Arguments: path :: String.t - the path of the file to read. Returns: {:ok, pid} the pid of the GenServer to be supervised."},{"ref":"FootbalEngine.html#search/1","title":"FootbalEngine.search/1","type":"function","doc":"Queries the indexed tables for information. Example: path = &quot;./Data.csv&quot; {:ok, :indexation_successful} = FootbalEngine.new(path) {:ok, results} = FootbalEngine.search( [{&quot;Div&quot;, [&quot;SP1&quot;, &quot;SP2&quot;]}, {&quot;Season&quot;, [&quot;201617&quot;]}] ) Arguments: query :: [{String.t, [String.t]}] - The query to perform. query is a list of tuples with the format {header :: String.t, [values :: String.t]}. For example, if I want to search for all the games in Div SP1 or E0, the following tuple would cover them {&quot;Div&quot;, [&quot;SP1&quot;, &quot;E0&quot;]}. If and I all games in Div SP1 and with HomeTeam Barcelona, the following list would cover this [{&quot;Div&quot;, [&quot;SP1&quot;]}, {&quot;HomeTeam&quot;, [&quot;Barcelona&quot;]}]. You can also send the values array empty to get all the games: [{&quot;Div&quot;, []] would get all games with that have a Div. Returns: {:ok, [Map.t]} if the search was successfull. The second element of the tuple is a list with all the entries matching the given result in a Map format. {:error, :invalid_headers, [String.t]} if some of the headers given were invalid, meaning they are missing from the CSV. The third element of the tuple is the list of the invalid headers. {:error, :no_valid_data_to_save} if the CSV file was empty, or had no valid data to index. This can happen if the all rows in the file were malformed or generated some kind of error. {:error, any} if the CSV file could not be indexed at all due to an error. The second element of the tuple is the reason of the error. {:error, :engine_not_started} if FootbalEngine.new(String.t) was not called beforehand."},{"ref":"FootbalEngine.Populator.html","title":"FootbalEngine.Populator","type":"module","doc":"Interface for the populator that fills up the memory table (populates it) with data."},{"ref":"FootbalEngine.Populator.html#new/1","title":"FootbalEngine.Populator.new/1","type":"function","doc":""},{"ref":"FootbalEngine.Populator.Cache.html","title":"FootbalEngine.Populator.Cache","type":"module","doc":"Reads the CSV file, validates and parses its data and then populates the memory tables (the DB) with it&#39;s information."},{"ref":"FootbalEngine.Populator.Cache.html#populate/2","title":"FootbalEngine.Populator.Cache.populate/2","type":"function","doc":""},{"ref":"FootbalEngine.Populator.Cache.html#t:index_status/0","title":"FootbalEngine.Populator.Cache.index_status/0","type":"type","doc":""},{"ref":"FootbalEngine.Populator.Parser.html","title":"FootbalEngine.Populator.Parser","type":"module","doc":"Contains several parsing utility functions to parse the data from the CSV to the Elixir native types."},{"ref":"FootbalEngine.Populator.Parser.html#parse_data/1","title":"FootbalEngine.Populator.Parser.parse_data/1","type":"function","doc":""},{"ref":"FootbalEngine.Populator.Parser.html#parse_date/1","title":"FootbalEngine.Populator.Parser.parse_date/1","type":"function","doc":""},{"ref":"FootbalEngine.Populator.Parser.html#parse_integer/1","title":"FootbalEngine.Populator.Parser.parse_integer/1","type":"function","doc":""},{"ref":"FootbalEngine.Populator.Server.html","title":"FootbalEngine.Populator.Server","type":"module","doc":"Server for the Cache. Tries to populate it with data and if it gets anything other than a complete success for the indexation, it will keep trying to repopulate the memory tables."},{"ref":"FootbalEngine.Populator.Server.html#child_spec/1","title":"FootbalEngine.Populator.Server.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"FootbalEngine.Populator.Server.html#start_link/1","title":"FootbalEngine.Populator.Server.start_link/1","type":"function","doc":""},{"ref":"FootbalEngine.Populator.Storage.html","title":"FootbalEngine.Populator.Storage","type":"module","doc":"Stores the given data in memory, indexing it as necessary along the way. Can return a complete success (if all the data was valid and inserted into memory), a partial success (if some data was faulty) or and error (depending on the reason it failed). No data is also treated as an error case because an empty memory DB is useless and is therefore likely to be result of a human error."},{"ref":"FootbalEngine.Populator.Storage.html#persist/2","title":"FootbalEngine.Populator.Storage.persist/2","type":"function","doc":""},{"ref":"FootbalEngine.Reader.html","title":"FootbalEngine.Reader","type":"module","doc":"Client that queries the memory DB for information. To use this API the engine must have populated the memory table before, otherwise all operations will fail."},{"ref":"FootbalEngine.Reader.html#search/2","title":"FootbalEngine.Reader.search/2","type":"function","doc":""}]